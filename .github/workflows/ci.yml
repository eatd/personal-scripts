name: CI/CD Pipeline

on:
    push:
        branches: [master, main]
    pull_request:
        branches: [master, main]
    workflow_dispatch:

jobs:
    lint-and-format:
        name: Code Quality Checks
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.11"
                  cache: "pip"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install ruff black isort mypy

            - name: Run Ruff (linter)
              run: |
                  ruff check . --output-format=github
              continue-on-error: true

            - name: Check code formatting with Black
              run: |
                  black --check --diff .
              continue-on-error: true

            - name: Check import sorting
              run: |
                  isort --check-only --diff .
              continue-on-error: true

            - name: Type checking with mypy
              run: |
                  mypy --install-types --non-interactive --ignore-missing-imports .
              continue-on-error: true

    security-scan:
        name: Security Vulnerability Scan
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.11"

            - name: Install security tools
              run: |
                  python -m pip install --upgrade pip
                  pip install safety bandit pip-audit

            - name: Run Safety check
              run: |
                  safety check --json || true
              continue-on-error: true

            - name: Run Bandit security scan
              run: |
                  bandit -r . -f json -o bandit-report.json || true
                  bandit -r . -f screen
              continue-on-error: true

            - name: Run pip-audit
              run: |
                  pip-audit --desc || true
              continue-on-error: true

            - name: Upload security reports
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: security-reports
                  path: |
                      bandit-report.json

    test:
        name: Run Tests
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
                python-version: ["3.9", "3.10", "3.11", "3.12"]

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ matrix.python-version }}
                  cache: "pip"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install pytest pytest-cov pytest-asyncio aiohttp
                  if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
              shell: bash

            - name: Run pytest with coverage
              run: |
                  pytest --cov=. --cov-report=xml --cov-report=term-missing
              continue-on-error: true

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v4
              if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
              with:
                  file: ./coverage.xml
                  flags: unittests
                  name: codecov-umbrella
              continue-on-error: true

    code-analysis:
        name: Advanced Code Analysis
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.11"

            - name: Install analysis tools
              run: |
                  python -m pip install --upgrade pip
                  pip install radon mccabe vulture

            - name: Calculate cyclomatic complexity
              run: |
                  radon cc . -a -nb
              continue-on-error: true

            - name: Calculate maintainability index
              run: |
                  radon mi . -nb
              continue-on-error: true

            - name: Find dead code
              run: |
                  vulture . --min-confidence 80
              continue-on-error: true

    dependency-check:
        name: Dependency Audit
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.11"

            - name: Install pip-audit
              run: |
                  python -m pip install --upgrade pip
                  pip install pip-audit

            - name: Audit dependencies
              run: |
                  pip-audit --desc --format json > audit-report.json || true
                  pip-audit --desc
              continue-on-error: true

            - name: Upload audit report
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: dependency-audit
                  path: audit-report.json

    build-status:
        name: Build Status Summary
        runs-on: ubuntu-latest
        needs:
            [
                lint-and-format,
                security-scan,
                test,
                code-analysis,
                dependency-check,
            ]
        if: always()

        steps:
            - name: Check build status
              run: |
                  echo "ðŸŽ‰ Pipeline execution completed!"
                  echo "Check individual job results for details."
